이진 탐색 트리와 키가 주어지면 키가 저장된 노드를 삭제하고
새로운 루트 노드를 반환한다.
TreeNode * delete_node(TreeNode * root, int key)		-->key: 삭제 키값.
{
if (root == NULL) return root;
만약 키가 루트보다 작으면 왼쪽 서브 트리에 있는 것임
if (key < root->key)
root->left = delete_node(root->left, key);
 만약 키가 루트보다 크면 오른쪽 서브 트리에 있는 것임
else if (key > root->key)
root->right = delete_node(root->right, key);
 키가 루트와 같으면 이 노드를 삭제하면 됨
 else {
// 첫 번째나 두 번째 경우
if (root->left == NULL) {
TreeNode * temp = root->right;
free(root);
return temp;
}
else if (root->right == NULL) {
TreeNode * temp = root->left;
free(root);
return temp;
}
// 세 번째 경우
TreeNode * temp = min_value_node(root->right);	루트의 오른쪽에서 최소값을 가지고 옴.
// 중외 순회시 후계 노드를 복사한다.링크는 손대지 않음
root->key = temp->key;
// 중외 순회시 후계 노드를 삭제한다.
root->right = delete_node(root->right, temp->key);		루트의 오른쪽 주소와 temp에 키값을 주어서 삭제할 노드를 찾는다(임노드)
}
return root;
}

**데이터 구조 그리는 거 낸다고 하시건강? 암튼 이거 그리는 거 못하면 c준대ㅠ
//중간에 자식노드를 삭제하는 경우 트리그리기 시험.

ppt91 빈칸냄
이진탐색트리는 균형트리가 아니다.
운이나쁘면 노드의 수만큼 높이를 가질수 있기떄문.
비트리;장점은 알고리즘이 심플한 편.
가능하면 원리를 아니까 데이터를 부를 수 있어야함.

ppt92 가장 좋은 트리를 만들어라.
불균형적인 트리를 오름차순으로 나열하고 가운데 값을 루트값으로 올린뒤에 균형적으로 트리를 만든다.
이 규칙을 따르면 이진탐색트리인데 균형적으로 트리를 만들 수 있음.

ppt93
최악으 경우는 노드 수 만큼 높이가 있는것.

시험문제:
중간고사와 비슷한패턴

큐: 선형큐, ***원형큐, 연결리스트 큐
선형,원형은 코드까지 알아야함. 그리고 장단점과 문제점까지. 해결책도 알기.

원형큐-시뮬레이션 안나옴
연결리스트큐는 코드 안냄.

리스트2
***원형연결리스트
***이중연결리스트_mp3플레이어동작

트리
***트리용어(10점)
***수식처리
스레드는 안냄
***과제-트리에서 노드의 수 찾기, 높이 구하기, 등 알고리즘 코드 나옴

이진탐색
삽입,삭제,성능분석 코드 나옴.

트리는 개념에 맞춰서 그림을 그려내면ㅇ됌.

미로 안냄.
