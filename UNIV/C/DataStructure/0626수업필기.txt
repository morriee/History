리스트
버킷리스트를 예로 드심.
1.삽입 연산
2.삭제 연산
3.탐색 연산
->프로그램으로 옮기면 하나하나가 다 함수적 요소임.

***ADT :구체적인 코드가 없다.(중간고사에냄)
Abstract Data Type
복잡한 것이 많이 감추어져 있는 것을 "추상화"라고함

ppt연결된 표현으로 바로 넘어감

연결된표현
node
삽입과 삭제. 상자의 화살표가 변함->주소가 하는 일.
주소가 가르키지 않는 것은 "삭제"라고도 할 수 있음.

연결된 표현의 장단점
장점:배열에 비해 삽입/삭제가 보다 용이.
배열은 데이터와 데이터 사이에 새로운 데이터를 삽입할경우, 또는 첫번째에 새로 삽입할 경우, 기존의 데이터를 뒤로 미뤄야함.
but,포인터는 화살표만 바꾸면됨.
또한 삭제 했을 때도, 중간에 삭제시 뒤에 있던 것을 앞으로 주소만 옴기면 됨.
단점:심플한거같은데 포인터가 있기 때문에 코딩이 어렵고 그렇기때문에 오류가 발생하기 쉽다.

**교재114쪽 프로그램 4.4  -malloc

ppt 20
단순연결리스트의 마지막 노트의 링크값은 null이다. 한방향으로감
원형연결리스트의 마지막 노트의 링크값은 첫번째 노드값이다.
이중연결리스트는 다음 노드는 다시 나를 가리키는 쌍방향의 리스트이다.

ppt 22 typedef**
typedef :  재정의
struct ListNode면 타입자체를 ListNode로 재정의하겠단 뜻
struct ListNode *link;	//자기참조구조체, 왜 근데 ListNode아님?->컴파일은 위에서 내려오므로 ListNode로 재정의 한 것을 모름.

ppt23
head=(ListNode*)malloc(sizeof(ListNode));
여기서 typedef하기 전이였으면, struct ListNode 였을것.

