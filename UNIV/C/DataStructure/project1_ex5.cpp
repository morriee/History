//포인터 = (메모리의) 주소
//포인터 변수 = 메모리의 주소를 저장하는 기억장소
//포인터 변수 선언문: '타입 *이름;'
//포인터 변수 선언과 초기화: '타입 *이름 = 주소값;'
//포인터 연산자 '&': 기억장소의 주소값을 읽어옴. 앤퍼센트라고 부름

#include <stdio.h>

int main() {
	int a = 10;	//일반 지역변수를 선언하고 초기화함. 

	//근데 a에 주소를 저장하고 싶어! 그러면...
	//포인터 선언 - 규칙: 기억장소에 저장된 값의 타입
	int *p = &a;
	// p에 a의 주소를 저장하고 싶을 때, 포인터 변수를 지정하여 값을 넣으면 되는데 일반 변수와 구분하기 위해, *와 &로 구분 한다.
	printf("a의 값 = %d\n", a);	//10
	printf("a의 주소 = %u\n", &a);	//u-unsigned 부호가 없는 수를 출력할 때 사용. d는 마이너스 값도 있기 때문에 주소값에 사용하지 않음.
	printf("a의 주소 = %p\n", &a);	//16진수
	printf("a의 주소 = %p\n", p);		// 위에서 p 라는 기억장소 자체가 a라는 주소를 가지고 있는 포인터 주소니까, p라고만 찍어도 위와 같은 값이 출력됨.
	printf("a의 값 = %d\n", *p);		//주소 값으로 이동해서 값을 읽어옴. *는 아스트릭스이고 주소값으로 이동하란 뜻을 가짐.
	printf("p의 주소 = %p\n", &p);	// 포인터 변수 p의 주소값을 의미함.

	int *q;
	q = p;
	printf("a의 값 =%d\n", *q);	//10

	*q = 20;	//20이라는 숫자를 q의 주소로 가서 저장하라.
	printf("a의 값 =%d\n", *p);	//20

}